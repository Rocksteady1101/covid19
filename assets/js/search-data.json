{
  
    
        "post0": {
            "title": "Title",
            "content": "import requests import pandas as pd import io import datetime as dt import plotly.express as px import ipywidgets as widgets import altair as alt url = &quot;https://onemocneni-aktualne.mzcr.cz/api/v2/covid-19/osoby.csv&quot; s = requests.get(url).content # parse_dates = [0], index_col = 0 df = pd.read_csv(io.StringIO(s.decode(&#39;utf-8&#39;)), parse_dates=[0]) okresy = {&#39;CZZZZZ&#39;: &#39;Extra-Regio&#39;, &#39;CZ0100&#39;: &#39;Praha&#39;, &#39;CZ020A&#39;: &#39;Praha-západ&#39;, &#39;CZ020B&#39;: &#39;Příbram&#39;, &#39;CZ020C&#39;: &#39;Rakovník&#39;, &#39;CZ0201&#39;: &#39;Benešov&#39;, &#39;CZ0202&#39;: &#39;Beroun&#39;, &#39;CZ0203&#39;: &#39;Kladno&#39;, &#39;CZ0204&#39;: &#39;Kolín&#39;, &#39;CZ0205&#39;: &#39;Kutná Hora&#39;, &#39;CZ0206&#39;: &#39;Mělník&#39;, &#39;CZ0207&#39;: &#39;Mladá Boleslav&#39;, &#39;CZ0208&#39;: &#39;Nymburk&#39;, &#39;CZ0209&#39;: &#39;Praha-východ&#39;, &#39;CZ0311&#39;: &#39;České Budějovice&#39;, &#39;CZ0312&#39;: &#39;Český Krumlov&#39;, &#39;CZ0313&#39;: &#39;Jindřichův Hradec&#39;, &#39;CZ0314&#39;: &#39;Písek&#39;, &#39;CZ0315&#39;: &#39;Prachatice&#39;, &#39;CZ0316&#39;: &#39;Strakonice&#39;, &#39;CZ0317&#39;: &#39;Tábor&#39;, &#39;CZ0321&#39;: &#39;Domažlice&#39;, &#39;CZ0322&#39;: &#39;Klatovy&#39;, &#39;CZ0323&#39;: &#39;Plzeň-město&#39;, &#39;CZ0324&#39;: &#39;Plzeň-jih&#39;, &#39;CZ0325&#39;: &#39;Plzeň-sever&#39;, &#39;CZ0326&#39;: &#39;Rokycany&#39;, &#39;CZ0327&#39;: &#39;Tachov&#39;, &#39;CZ0411&#39;: &#39;Cheb&#39;, &#39;CZ0412&#39;: &#39;Karlovy Vary&#39;, &#39;CZ0413&#39;: &#39;Sokolov&#39;, &#39;CZ0421&#39;: &#39;Děčín&#39;, &#39;CZ0422&#39;: &#39;Chomutov&#39;, &#39;CZ0423&#39;: &#39;Litoměřice&#39;, &#39;CZ0424&#39;: &#39;Louny&#39;, &#39;CZ0425&#39;: &#39;Most&#39;, &#39;CZ0426&#39;: &#39;Teplice&#39;, &#39;CZ0427&#39;: &#39;Ústí nad Labem&#39;, &#39;CZ0511&#39;: &#39;Česká Lípa&#39;, &#39;CZ0512&#39;: &#39;Jablonec nad Nisou&#39;, &#39;CZ0513&#39;: &#39;Liberec&#39;, &#39;CZ0514&#39;: &#39;Semily&#39;, &#39;CZ0521&#39;: &#39;Hradec Králové&#39;, &#39;CZ0522&#39;: &#39;Jičín&#39;, &#39;CZ0523&#39;: &#39;Náchod&#39;, &#39;CZ0524&#39;: &#39;Rychnov nad Kněžnou&#39;, &#39;CZ0525&#39;: &#39;Trutnov&#39;, &#39;CZ0531&#39;: &#39;Chrudim&#39;, &#39;CZ0532&#39;: &#39;Pardubice&#39;, &#39;CZ0533&#39;: &#39;Svitavy&#39;, &#39;CZ0534&#39;: &#39;Ústí nad Orlicí&#39;, &#39;CZ0631&#39;: &#39;Havlíčkův Brod&#39;, &#39;CZ0632&#39;: &#39;Jihlava&#39;, &#39;CZ0633&#39;: &#39;Pelhřimov&#39;, &#39;CZ0634&#39;: &#39;Třebíč&#39;, &#39;CZ0635&#39;: &#39;Žďár nad Sázavou&#39;, &#39;CZ0641&#39;: &#39;Blansko&#39;, &#39;CZ0642&#39;: &#39;Brno-město&#39;, &#39;CZ0643&#39;: &#39;Brno-venkov&#39;, &#39;CZ0644&#39;: &#39;Břeclav&#39;, &#39;CZ0645&#39;: &#39;Hodonín&#39;, &#39;CZ0646&#39;: &#39;Vyškov&#39;, &#39;CZ0647&#39;: &#39;Znojmo&#39;, &#39;CZ0711&#39;: &#39;Jeseník&#39;, &#39;CZ0712&#39;: &#39;Olomouc&#39;, &#39;CZ0713&#39;: &#39;Prostějov&#39;, &#39;CZ0714&#39;: &#39;Přerov&#39;, &#39;CZ0715&#39;: &#39;Šumperk&#39;, &#39;CZ0721&#39;: &#39;Kroměříž&#39;, &#39;CZ0722&#39;: &#39;Uherské Hradiště&#39;, &#39;CZ0723&#39;: &#39;Vsetín&#39;, &#39;CZ0724&#39;: &#39;Zlín&#39;, &#39;CZ0801&#39;: &#39;Bruntál&#39;, &#39;CZ0802&#39;: &#39;Frýdek-Místek&#39;, &#39;CZ0803&#39;: &#39;Karviná&#39;, &#39;CZ0804&#39;: &#39;Nový Jičín&#39;, &#39;CZ0805&#39;: &#39;Opava&#39;, &#39;CZ0806&#39;: &#39;Ostrava-město&#39;} def count_by_date_district(df): date_district_count = df.groupby([&#39;datum&#39;, &#39;okres_lau_kod&#39;, &#39;okres_nazev&#39;]).count().reset_index() return date_district_count # Týdenní přírůstek v okresech po dnech&#39; def week_count_by_date_district(df): date_district_count = df.copy() date_district_count = date_district_count.groupby( [&#39;datum&#39;, &#39;okres_lau_kod&#39;, &#39;okres_nazev&#39;]).count().reset_index() range_max = date_district_count[&#39;datum&#39;].max() range_min = range_max - dt.timedelta(days=7) date_district_count = date_district_count[(date_district_count[&#39;datum&#39;] &gt;= range_min) &amp; (date_district_count[&#39;datum&#39;] &lt;= range_max)] date_district_count[&#39;animate_date&#39;] = date_district_count[&#39;datum&#39;] date_district_count[&#39;animate_date&#39;] = date_district_count[&#39;animate_date&#39;].dt.strftime(&#39;%Y-%m-%d&#39;) return date_district_count # Celkový týdenní přírůstek v okresech def week_total_count_by_district(df): week_total_count_district = df.copy() range_max = week_total_count_district[&#39;datum&#39;].max() range_min = range_max - dt.timedelta(days=7) week_total_count_district = week_total_count_district[ (week_total_count_district[&#39;datum&#39;] &gt;= range_min) &amp; (week_total_count_district[&#39;datum&#39;] &lt;= range_max)] week_total_count_district = week_total_count_district.groupby( [&#39;okres_lau_kod&#39;, &#39;okres_nazev&#39;]).count().reset_index() return week_total_count_district def total_count_by_district(df): total_count_district = df.copy() total_count_district = total_count_district.groupby([&#39;okres_lau_kod&#39;, &#39;okres_nazev&#39;]).count().reset_index() return total_count_district def total_count_by_date(df): total = df.groupby([&#39;datum&#39;]).count().reset_index() return total df[&#39;okres_nazev&#39;] = df[&#39;okres_lau_kod&#39;].map(okresy) date_district_count = count_by_date_district(df) week_date_district_count = week_count_by_date_district(df) week_total_count_district = week_total_count_by_district(df) total_count_district = total_count_by_district(df) total_count_date = total_count_by_date(df) . republic_total_line_graph = px.line(total_count_date, x=&#39;datum&#39;, y=&#39;vek&#39;, labels={&#39;datum&#39;: &#39;Datum&#39;, &#39;vek&#39;: &#39;Počet&#39;}, title=&#39;Přírůstky celá ČR&#39;, template=&#39;plotly&#39;, color_discrete_sequence=px.colors.diverging.Spectral) republic_total_line_graph.show() . alt.Chart(total_count_date).mark_line().encode( x=&#39;datum&#39;, y=&#39;vek&#39;, ) . total_count_date . datum vek pohlavi kraj_nuts_kod okres_lau_kod nakaza_v_zahranici nakaza_zeme_csu_kod okres_nazev . 0 | 2020-03-01 | 3 | 3 | 3 | 3 | 3 | 3 | 3 | . 1 | 2020-03-03 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | . 2 | 2020-03-04 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | . 3 | 2020-03-05 | 3 | 3 | 3 | 3 | 2 | 2 | 3 | . 4 | 2020-03-06 | 11 | 11 | 11 | 11 | 8 | 8 | 11 | . ... | ... | ... | ... | ... | ... | ... | ... | ... | . 231 | 2020-10-19 | 7815 | 7815 | 7815 | 7815 | 43 | 43 | 7815 | . 232 | 2020-10-20 | 11626 | 11626 | 11626 | 11626 | 35 | 35 | 11626 | . 233 | 2020-10-21 | 14446 | 14446 | 14446 | 14446 | 41 | 41 | 14446 | . 234 | 2020-10-22 | 13671 | 13671 | 13671 | 13671 | 21 | 21 | 13671 | . 235 | 2020-10-23 | 6619 | 6619 | 6619 | 6619 | 6 | 6 | 6619 | . 236 rows × 8 columns . date_district_count[date_district_count[&#39;okres_lau_kod&#39;].isin([&#39;CZ0100&#39;,&#39;CZ0722&#39;])] . datum okres_lau_kod okres_nazev vek pohlavi kraj_nuts_kod nakaza_v_zahranici nakaza_zeme_csu_kod . 0 | 2020-03-01 | CZ0100 | Praha | 2 | 2 | 2 | 2 | 2 | . 3 | 2020-03-04 | CZ0100 | Praha | 1 | 1 | 1 | 1 | 1 | . 5 | 2020-03-06 | CZ0100 | Praha | 8 | 8 | 8 | 7 | 7 | . 8 | 2020-03-07 | CZ0100 | Praha | 4 | 4 | 4 | 3 | 3 | . 17 | 2020-03-09 | CZ0100 | Praha | 4 | 4 | 4 | 4 | 4 | . ... | ... | ... | ... | ... | ... | ... | ... | ... | . 8928 | 2020-10-21 | CZ0722 | Uherské Hradiště | 274 | 274 | 274 | 1 | 1 | . 8937 | 2020-10-22 | CZ0100 | Praha | 1670 | 1670 | 1670 | 7 | 7 | . 9005 | 2020-10-22 | CZ0722 | Uherské Hradiště | 243 | 243 | 243 | 0 | 0 | . 9014 | 2020-10-23 | CZ0100 | Praha | 579 | 579 | 579 | 0 | 0 | . 9082 | 2020-10-23 | CZ0722 | Uherské Hradiště | 145 | 145 | 145 | 0 | 0 | . 370 rows × 8 columns . okres_line = px.line(date_district_count[date_district_count[&#39;okres_lau_kod&#39;].isin([&#39;CZ0100&#39;,&#39;CZ0722&#39;])], x=&#39;datum&#39;, y=&#39;vek&#39;, labels={&#39;datum&#39;: &#39;Datum&#39;, &#39;vek&#39;: &#39;Počet&#39;, &#39;okres_nazev&#39;: &#39;Název okresu&#39;}, title=&#39;Přírůstky v okresech&#39;, template=&#39;plotly&#39;, color=&#39;okres_nazev&#39;, color_discrete_sequence=px.colors.diverging.Spectral) okres_line.show() . alt.Chart(date_district_count[date_district_count[&#39;okres_lau_kod&#39;].isin([&#39;CZ0100&#39;,&#39;CZ0722&#39;])]).mark_line().encode( x=&#39;datum&#39;, y=&#39;vek&#39;, ) .",
            "url": "https://rocksteady1101.github.io/covid19/2020/10/22/covid.html",
            "relUrl": "/2020/10/22/covid.html",
            "date": " • Oct 22, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://rocksteady1101.github.io/covid19/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Covid 19 statistics",
            "content": "import requests import pandas as pd import io import datetime as dt import plotly.express as px import ipywidgets as widgets url = &quot;https://onemocneni-aktualne.mzcr.cz/api/v2/covid-19/osoby.csv&quot; s = requests.get(url).content # parse_dates = [0], index_col = 0 df = pd.read_csv(io.StringIO(s.decode(&#39;utf-8&#39;)), parse_dates=[0]) okresy = {&#39;CZZZZZ&#39;: &#39;Extra-Regio&#39;, &#39;CZ0100&#39;: &#39;Praha&#39;, &#39;CZ020A&#39;: &#39;Praha-západ&#39;, &#39;CZ020B&#39;: &#39;Příbram&#39;, &#39;CZ020C&#39;: &#39;Rakovník&#39;, &#39;CZ0201&#39;: &#39;Benešov&#39;, &#39;CZ0202&#39;: &#39;Beroun&#39;, &#39;CZ0203&#39;: &#39;Kladno&#39;, &#39;CZ0204&#39;: &#39;Kolín&#39;, &#39;CZ0205&#39;: &#39;Kutná Hora&#39;, &#39;CZ0206&#39;: &#39;Mělník&#39;, &#39;CZ0207&#39;: &#39;Mladá Boleslav&#39;, &#39;CZ0208&#39;: &#39;Nymburk&#39;, &#39;CZ0209&#39;: &#39;Praha-východ&#39;, &#39;CZ0311&#39;: &#39;České Budějovice&#39;, &#39;CZ0312&#39;: &#39;Český Krumlov&#39;, &#39;CZ0313&#39;: &#39;Jindřichův Hradec&#39;, &#39;CZ0314&#39;: &#39;Písek&#39;, &#39;CZ0315&#39;: &#39;Prachatice&#39;, &#39;CZ0316&#39;: &#39;Strakonice&#39;, &#39;CZ0317&#39;: &#39;Tábor&#39;, &#39;CZ0321&#39;: &#39;Domažlice&#39;, &#39;CZ0322&#39;: &#39;Klatovy&#39;, &#39;CZ0323&#39;: &#39;Plzeň-město&#39;, &#39;CZ0324&#39;: &#39;Plzeň-jih&#39;, &#39;CZ0325&#39;: &#39;Plzeň-sever&#39;, &#39;CZ0326&#39;: &#39;Rokycany&#39;, &#39;CZ0327&#39;: &#39;Tachov&#39;, &#39;CZ0411&#39;: &#39;Cheb&#39;, &#39;CZ0412&#39;: &#39;Karlovy Vary&#39;, &#39;CZ0413&#39;: &#39;Sokolov&#39;, &#39;CZ0421&#39;: &#39;Děčín&#39;, &#39;CZ0422&#39;: &#39;Chomutov&#39;, &#39;CZ0423&#39;: &#39;Litoměřice&#39;, &#39;CZ0424&#39;: &#39;Louny&#39;, &#39;CZ0425&#39;: &#39;Most&#39;, &#39;CZ0426&#39;: &#39;Teplice&#39;, &#39;CZ0427&#39;: &#39;Ústí nad Labem&#39;, &#39;CZ0511&#39;: &#39;Česká Lípa&#39;, &#39;CZ0512&#39;: &#39;Jablonec nad Nisou&#39;, &#39;CZ0513&#39;: &#39;Liberec&#39;, &#39;CZ0514&#39;: &#39;Semily&#39;, &#39;CZ0521&#39;: &#39;Hradec Králové&#39;, &#39;CZ0522&#39;: &#39;Jičín&#39;, &#39;CZ0523&#39;: &#39;Náchod&#39;, &#39;CZ0524&#39;: &#39;Rychnov nad Kněžnou&#39;, &#39;CZ0525&#39;: &#39;Trutnov&#39;, &#39;CZ0531&#39;: &#39;Chrudim&#39;, &#39;CZ0532&#39;: &#39;Pardubice&#39;, &#39;CZ0533&#39;: &#39;Svitavy&#39;, &#39;CZ0534&#39;: &#39;Ústí nad Orlicí&#39;, &#39;CZ0631&#39;: &#39;Havlíčkův Brod&#39;, &#39;CZ0632&#39;: &#39;Jihlava&#39;, &#39;CZ0633&#39;: &#39;Pelhřimov&#39;, &#39;CZ0634&#39;: &#39;Třebíč&#39;, &#39;CZ0635&#39;: &#39;Žďár nad Sázavou&#39;, &#39;CZ0641&#39;: &#39;Blansko&#39;, &#39;CZ0642&#39;: &#39;Brno-město&#39;, &#39;CZ0643&#39;: &#39;Brno-venkov&#39;, &#39;CZ0644&#39;: &#39;Břeclav&#39;, &#39;CZ0645&#39;: &#39;Hodonín&#39;, &#39;CZ0646&#39;: &#39;Vyškov&#39;, &#39;CZ0647&#39;: &#39;Znojmo&#39;, &#39;CZ0711&#39;: &#39;Jeseník&#39;, &#39;CZ0712&#39;: &#39;Olomouc&#39;, &#39;CZ0713&#39;: &#39;Prostějov&#39;, &#39;CZ0714&#39;: &#39;Přerov&#39;, &#39;CZ0715&#39;: &#39;Šumperk&#39;, &#39;CZ0721&#39;: &#39;Kroměříž&#39;, &#39;CZ0722&#39;: &#39;Uherské Hradiště&#39;, &#39;CZ0723&#39;: &#39;Vsetín&#39;, &#39;CZ0724&#39;: &#39;Zlín&#39;, &#39;CZ0801&#39;: &#39;Bruntál&#39;, &#39;CZ0802&#39;: &#39;Frýdek-Místek&#39;, &#39;CZ0803&#39;: &#39;Karviná&#39;, &#39;CZ0804&#39;: &#39;Nový Jičín&#39;, &#39;CZ0805&#39;: &#39;Opava&#39;, &#39;CZ0806&#39;: &#39;Ostrava-město&#39;} def count_by_date_district(df): date_district_count = df.groupby([&#39;datum&#39;, &#39;okres_lau_kod&#39;, &#39;okres_nazev&#39;]).count().reset_index() return date_district_count # Týdenní přírůstek v okresech po dnech&#39; def week_count_by_date_district(df): date_district_count = df.copy() date_district_count = date_district_count.groupby( [&#39;datum&#39;, &#39;okres_lau_kod&#39;, &#39;okres_nazev&#39;]).count().reset_index() range_max = date_district_count[&#39;datum&#39;].max() range_min = range_max - dt.timedelta(days=7) date_district_count = date_district_count[(date_district_count[&#39;datum&#39;] &gt;= range_min) &amp; (date_district_count[&#39;datum&#39;] &lt;= range_max)] date_district_count[&#39;animate_date&#39;] = date_district_count[&#39;datum&#39;] date_district_count[&#39;animate_date&#39;] = date_district_count[&#39;animate_date&#39;].dt.strftime(&#39;%Y-%m-%d&#39;) return date_district_count # Celkový týdenní přírůstek v okresech def week_total_count_by_district(df): week_total_count_district = df.copy() range_max = week_total_count_district[&#39;datum&#39;].max() range_min = range_max - dt.timedelta(days=7) week_total_count_district = week_total_count_district[ (week_total_count_district[&#39;datum&#39;] &gt;= range_min) &amp; (week_total_count_district[&#39;datum&#39;] &lt;= range_max)] week_total_count_district = week_total_count_district.groupby( [&#39;okres_lau_kod&#39;, &#39;okres_nazev&#39;]).count().reset_index() return week_total_count_district def total_count_by_district(df): total_count_district = df.copy() total_count_district = total_count_district.groupby([&#39;okres_lau_kod&#39;, &#39;okres_nazev&#39;]).count().reset_index() return total_count_district def total_count_by_date(df): total = df.groupby([&#39;datum&#39;]).count().reset_index() return total df[&#39;okres_nazev&#39;] = df[&#39;okres_lau_kod&#39;].map(okresy) date_district_count = count_by_date_district(df) week_date_district_count = week_count_by_date_district(df) week_total_count_district = week_total_count_by_district(df) total_count_district = total_count_by_district(df) total_count_date = total_count_by_date(df) . republic_total_line_graph = px.line(total_count_date, x=&#39;datum&#39;, y=&#39;vek&#39;, labels={&#39;datum&#39;: &#39;Datum&#39;, &#39;vek&#39;: &#39;Počet&#39;}, title=&#39;Přírůstky celá ČR&#39;, template=&#39;plotly&#39;, color_discrete_sequence=px.colors.diverging.Spectral) republic_total_line_graph.show() . okres_line = px.line(date_district_count[date_district_count[&#39;okres_lau_kod&#39;].isin([&#39;CZ0100&#39;,&#39;CZ0722&#39;])], x=&#39;datum&#39;, y=&#39;vek&#39;, labels={&#39;datum&#39;: &#39;Datum&#39;, &#39;vek&#39;: &#39;Počet&#39;, &#39;okres_nazev&#39;: &#39;Název okresu&#39;}, title=&#39;Přírůstky v okresech&#39;, template=&#39;plotly&#39;, color=&#39;okres_nazev&#39;, color_discrete_sequence=px.colors.diverging.Spectral) okres_line.show() .",
            "url": "https://rocksteady1101.github.io/covid19/2020/02/20/covid19cz.html",
            "relUrl": "/2020/02/20/covid19cz.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://rocksteady1101.github.io/covid19/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://rocksteady1101.github.io/covid19/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rocksteady1101.github.io/covid19/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}